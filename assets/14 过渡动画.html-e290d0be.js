import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as e,c as s,a as i,b as n,d as a,f as o}from"./app-df6f159f.js";const m={},c=o('<h2 id="transform" tabindex="-1"><a class="header-anchor" href="#transform" aria-hidden="true">#</a> transform</h2><p>允许你旋转，缩放，倾斜或平移给定元素</p><ul><li>平移：translate(x, y)</li><li>缩放：scale(x, y) <ul><li>一个值时，设置x轴上的缩放</li><li>二个值时，设置x轴和y轴上的缩放</li></ul></li><li>旋转：rotate(deg) <ul><li>一个值时，表示旋转的角度 <ul><li>deg：旋转的角度</li><li>正数为顺时针</li><li>负数为逆时针</li></ul></li></ul></li><li>倾斜：skew(deg, deg) <ul><li>一个值时，表示x轴上的倾斜</li><li>二个值时，表示x轴和y轴上的倾斜</li></ul></li><li>变形的原点：origin <ul><li>一个值：设置x轴的原点</li><li>两个值： 设置x轴和y轴的原点<br> left, center, right, top, bottom关键字<br> length：从左上角开始计算<br> 百分比：参考元素本身大小</li></ul></li></ul><h2 id="transition" tabindex="-1"><a class="header-anchor" href="#transition" aria-hidden="true">#</a> transition</h2><p>transition CSS 属性是 transition-property，transition-duration，transition-timing-function 和 transition-delay 的一个简写属性</p>',5),d=i("li",null,[n("transition-property：指定应用过渡属性的名称"),i("br"),n(" 可以写all表示所有可动画的属性"),i("br"),n(" 属性是否支持动画查看文档")],-1),u=i("li",null,[n("transition-duration：指定过渡动画所需的时间"),i("br"),n(" 单位可以是秒（s）或毫秒（ms）")],-1),_=i("br",null,null,-1),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition-timing-function",target:"_blank",rel:"noopener noreferrer"},f=i("li",null,"transition-delay：指定过渡动画执行之前的等待时间",-1),b=i("h2",{id:"关键帧动画",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#关键帧动画","aria-hidden":"true"},"#"),n(" 关键帧动画")],-1),p={href:"https://www.runoob.com/css3/css3-animations.html",target:"_blank",rel:"noopener noreferrer"},g=o("<p>之前我们学习了transition来进行过渡动画，但是过渡动画只能控制首尾两个值：<br> 从关键帧动画的角度相当于只是定义了两帧的状态：第一帧和最后一帧。<br> 如果我们希望可以有更多状态的变化，可以直接使用关键帧动画。<br> 关键帧动画使用@keyframes来定义多个变化状态，并且使用animation-name来声明匹配：<br> 1. 使用 @keyframes创建一个规则<br> 2. @keyframes中使用百分比定义各个阶段的样式<br> 3. 通过animation将动画添加到属性上<br> 另外，也可以使用from和to关键字：<br> from相当于0%<br> to相当于100%</p><p>CSS animation 属性是 animation-name，animation-duration, animation-timing-function，animation-delay，animation-iteration-count，animation-direction，animation-fill-mode 和 animation-play-state 属性的一个简写属性形式。</p><ul><li>animation-name：指定执行哪一个关键帧动画</li><li>animation-duration：指定动画的持续时间</li><li>animation-timing-function：指定动画的变化曲线</li><li>animation-delay：指定延迟执行的时间</li><li>animation-iteration-count：指定动画执行的次数，执行infinite表示无限动画</li><li>animation-direction：指定方向，常用值normal和reverse</li><li>animation-fill-mode：<mark>执行动画最后保留哪一个值</mark><br> none：动画完成后回到初始状态。<br> forwards：<strong>动画完成后停留在最后一帧状态。</strong><br> backwards：在动画执行之前，将元素设置为动画的初始状态。<br> both：同时应用forwards和backwards的效果。</li><li>none：回到没有执行动画的位置</li><li>forwards：动画最后一帧的位置</li><li>backwards：动画第一帧的位置</li><li>animation-play-state：指定动画运行或者暂停（在JavaScript中使用，用于暂停动画）</li></ul>",3);function x(y,k){const t=l("ExternalLinkIcon");return e(),s("div",null,[c,i("ul",null,[d,u,i("li",null,[n("transition-timing-function：指定动画的变化曲线"),_,i("a",h,[n("transition-timing-function - CSS：层叠样式表 | MDN (mozilla.org)"),a(t)])]),f]),b,i("p",null,[i("a",p,[n("CSS3 动画 | 菜鸟教程 (runoob.com)"),a(t)])]),g])}const C=r(m,[["render",x],["__file","14 过渡动画.html.vue"]]);export{C as default};
