import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as l,c as e,e as a}from"./app-e19660ae.js";const r="/blog/assets/04-01-bbee97ca.webp",n={},t=a('<h2 id="属性继承" tabindex="-1"><a class="header-anchor" href="#属性继承" aria-hidden="true">#</a> 属性继承</h2><p>CSS的某些属性具有继承性(Inherited):<br> 如果一个属性具备继承性, 那么在该元素上设置后, 它的后代元素都可以继承这个属性;当然, 如果后代元素自己有设置该属性, 那么优先使用后代元素自己的属性(不管继承过来的属性权重多高);</p><p>如何知道一个属性是否具有继承性呢?<br> 常见的font-size/font-family/font-weight/line-height/color/text-align都具有继承性;</p><p><img src="'+r+'" alt="常见的继承属性" loading="lazy"></p><h2 id="属性的层叠" tabindex="-1"><a class="header-anchor" href="#属性的层叠" aria-hidden="true">#</a> 属性的层叠</h2><p>对于一个元素来说, 相同一个属性我们可以通过 不同的选择器给它进行多次设置;<br> 那么属性会被一层层覆盖上去<br> 但是最终只有一个会生效;</p><p>那么多个样式属性覆盖上去, 哪一个会生效呢?<br> 判断一: 选择器的权重, 权重大的生效, 根据权重可以判断出优先级;<br> 判断二: 先后顺序, 权重相同时, 后面设置的生效;</p><h3 id="选择器的权重" tabindex="-1"><a class="header-anchor" href="#选择器的权重" aria-hidden="true">#</a> 选择器的权重</h3><ul><li>!important：10000</li><li>内联样式：1000</li><li>id选择器：100</li><li>类选择器、属性选择器、伪类：10</li><li>元素选择器、伪元素：1</li><li>通配符：0</li></ul><h2 id="html元素的类型" tabindex="-1"><a class="header-anchor" href="#html元素的类型" aria-hidden="true">#</a> HTML元素的类型</h2><p>在前面我们会经常提到div是<strong>块级元素</strong>会独占一行, span是<strong>行内级元素</strong>会在同一行显示.</p><p>到底什么是块级元素, 什么是行内级元素呢?<br> ◼ HTML定义元素类型的思路:</p><p>HTML元素有很多, 比如h元素/p元素/div元素/span元素/img元素/a元素等等;<br> 当我们把这个元素<strong>放到页面上</strong>时, 这个元素到底<strong>占据页面中一行多大的空间</strong>呢?<br> ✓ 为什么我们这里只说一行呢? 因为垂直方向的高度通常是内容决定的;<br> 比如一个h1元素的标题, 我们必然是希望它独占一行的, 其他的内容不应该和我的标题放在一起;<br> 比如一个p元素的段落, 必然也应该独占一行, 其他的内容不应该和我的段落放在一起;<br> 而类似于img/span/a元素, 通常是对内容的某一个细节的特殊描述, 没有必要独占一行;<br> 所以, 为了区分哪些元素需要独占一行, 哪些元素不需要独占一行, HTML将元素区分(本质是通过CSS的)成了两类:<br> 块级元素（block-level elements）: <strong>独占父元素的一行</strong><br> 行内级元素（inline-level elements）:<strong>多个行内级元素可以在父元素的同一行中显示</strong></p><h2 id="display" tabindex="-1"><a class="header-anchor" href="#display" aria-hidden="true">#</a> display</h2><p>CSS中有个display属性，能修改元素的显示类型，有4个常用值</p><ul><li>block：让元素显示为块级元素</li><li>inline：让元素显示为行内级元素</li><li>inline-block：让元素同时具备行内级、块级元素的特征</li><li>none：隐藏元素</li></ul><h3 id="display值的特性" tabindex="-1"><a class="header-anchor" href="#display值的特性" aria-hidden="true">#</a> display值的特性</h3><ul><li>block <ul><li>独占一行</li><li>可以设置宽高（设置后依旧独占一行）</li><li>高度默认由内容决定</li></ul></li><li>inline-block <ul><li>和其他行内级元素在同一行</li><li>可以设置宽高</li><li>默认宽高由内容决定</li></ul></li><li>inline <ul><li>和其他行内级元素在同一行</li><li>不可以设置宽度和高度</li><li>宽度和高度由内容决定</li></ul></li></ul><h2 id="元素隐藏方法" tabindex="-1"><a class="header-anchor" href="#元素隐藏方法" aria-hidden="true">#</a> 元素隐藏方法</h2><ol><li>display设置为none <ul><li>元素不显示出来, 并且也不占据位置, <strong>不占据任何空间</strong></li></ul></li><li>visibility设置为hidden <ul><li>虽然元素不可见, 但是<strong>会占据元素应该占据的空间</strong></li></ul></li><li>rgba设置颜色, 将a的值设置为0 <ul><li>rgba的a设置的是alpha值, 可以设置透明度, <strong>不影响子元素</strong></li></ul></li><li>opacity设置透明度, 设置为0 <ul><li>设置整个元素的透明度, <strong>会影响所有的子元素</strong></li></ul></li></ol><h2 id="overflow" tabindex="-1"><a class="header-anchor" href="#overflow" aria-hidden="true">#</a> overflow</h2><p>overflow用于控制内容溢出时的行为</p><ul><li>visible：溢出的内容照样可见</li><li>hidden：溢出的内容直接裁剪</li><li>scroll：溢出的内容被裁剪，但可以通过滚动机制查看 <ul><li>会一直显示滚动条区域，滚动条区域占用的空间属于width、height<br> auto：自动根据内容是否溢出来决定是否提供滚动机制</li></ul></li></ul>',23),o=[t];function s(h,d){return l(),e("div",null,o)}const u=i(n,[["render",s],["__file","05继承_层叠_类型.html.vue"]]);export{u as default};
