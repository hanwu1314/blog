const e=JSON.parse('{"key":"v-d9c9a05a","path":"/frontEnd/vue3/%E9%98%B6%E6%AE%B5%E4%B8%80/06Vue%E7%9A%84computed.html","title":"Vue的computed","lang":"zh-CN","frontmatter":{"title":"Vue的computed","icon":"bijiben","category":"vue","order":6,"description":"认识计算属性computed 什么是计算属性呢？ 官方并没有给出直接的概念解释； 而是说：对于任何包含响应式数据的复杂逻辑，你都应该使用计算属性； 计算属性将被混入到组件实例中。所有 getter 和 setter 的 this 上下文自动地绑定为组件实例； 计算属性就是当依赖的属性的值发生变化的时候，才会触发他的更改，如果依赖的值，不发生变化的时候，使用的是缓存中的属性值。 函数形式-vue3 let price = ref(0)//$0 let m = computed&lt;string&gt;(() =&gt; { return `$` + price.value })","head":[["meta",{"property":"og:url","content":"https://ycyang.site/blog/frontEnd/vue3/%E9%98%B6%E6%AE%B5%E4%B8%80/06Vue%E7%9A%84computed.html"}],["meta",{"property":"og:site_name","content":"寒舞知识宝库"}],["meta",{"property":"og:title","content":"Vue的computed"}],["meta",{"property":"og:description","content":"认识计算属性computed 什么是计算属性呢？ 官方并没有给出直接的概念解释； 而是说：对于任何包含响应式数据的复杂逻辑，你都应该使用计算属性； 计算属性将被混入到组件实例中。所有 getter 和 setter 的 this 上下文自动地绑定为组件实例； 计算属性就是当依赖的属性的值发生变化的时候，才会触发他的更改，如果依赖的值，不发生变化的时候，使用的是缓存中的属性值。 函数形式-vue3 let price = ref(0)//$0 let m = computed&lt;string&gt;(() =&gt; { return `$` + price.value })"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-28T08:57:23.000Z"}],["meta",{"property":"article:author","content":"Mr.DanceCold"}],["meta",{"property":"article:modified_time","content":"2023-08-28T08:57:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue的computed\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-28T08:57:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.DanceCold\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"认识计算属性computed","slug":"认识计算属性computed","link":"#认识计算属性computed","children":[{"level":3,"title":"函数形式-vue3","slug":"函数形式-vue3","link":"#函数形式-vue3","children":[]},{"level":3,"title":"对象形式-vue3","slug":"对象形式-vue3","link":"#对象形式-vue3","children":[]}]},{"level":2,"title":"案例实现思路","slug":"案例实现思路","link":"#案例实现思路","children":[{"level":3,"title":"实现思路一：模板语法","slug":"实现思路一-模板语法","link":"#实现思路一-模板语法","children":[]},{"level":3,"title":"实现思路二：method实现","slug":"实现思路二-method实现","link":"#实现思路二-method实现","children":[]},{"level":3,"title":"思路三的实现：computed实现","slug":"思路三的实现-computed实现","link":"#思路三的实现-computed实现","children":[]}]},{"level":2,"title":"计算属性的缓存","slug":"计算属性的缓存","link":"#计算属性的缓存","children":[]},{"level":2,"title":"计算属性的setter和getter","slug":"计算属性的setter和getter","link":"#计算属性的setter和getter","children":[{"level":3,"title":"todolist - 删除已完成的列表","slug":"todolist-删除已完成的列表","link":"#todolist-删除已完成的列表","children":[]}]}],"git":{"createdTime":1693208911000,"updatedTime":1693213043000,"contributors":[{"name":"hanwu","email":"hanwu1314@outlook.com","commits":2}]},"readingTime":{"minutes":4.39,"words":1316},"filePathRelative":"frontEnd/vue3/阶段一/06Vue的computed.md","localizedDate":"2023年8月28日","excerpt":"<h2> 认识计算属性computed</h2>\\n<p><strong>什么是计算属性呢？</strong><br>\\n官方并没有给出直接的概念解释；<br>\\n而是说：对于任何包含响应式数据的复杂逻辑，你都应该使用<strong>计算属性</strong>；<br>\\n计算属性将被混入到组件实例中。所有 getter 和 setter 的 this 上下文自动地绑定为组件实例；<br>\\n计算属性就是<mark>当依赖的属性的值发生变化的时候，才会触发他的更改</mark>，如果依赖的值，不发生变化的时候，使用的是缓存中的属性值。</p>\\n<h3> 函数形式-vue3</h3>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">let</span> price <span class=\\"token operator\\">=</span> <span class=\\"token function\\">ref</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token comment\\">//$0</span>\\n\\n<span class=\\"token keyword\\">let</span> m <span class=\\"token operator\\">=</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">computed</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">string</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">$</span><span class=\\"token template-punctuation string\\">`</span></span> <span class=\\"token operator\\">+</span> price<span class=\\"token punctuation\\">.</span>value\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"Mr.DanceCold"},"autoDesc":true}');export{e as data};
