import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as e,e as s}from"./app-1f4b31e2.js";const t="/blog/assets/hanwu-image-20230823105900334-6e6aa698.png",a="/blog/assets/hanwu-image-20230823105908879-c39a0a35.png",n={},r=s('<h1 id="弹性盒flexbox" tabindex="-1"><a class="header-anchor" href="#弹性盒flexbox" aria-hidden="true">#</a> 弹性盒flexbox</h1><p>弹性盒子是一种用于按行或按列布局元素的一维布局方法<br> 元素可以膨胀以填充额外的空间, 收缩以适应更小的空间;</p><p>应用在 flex container 上的 CSS 属性</p><ul><li>flex-flow <ul><li>flex-flow 属性是 flex-direction 和 flex-wrap 的简写。</li></ul></li><li>flex-direction <ul><li>row（默认值）、row-reverse、column、column-reverse</li></ul></li><li>flex-wrap <ul><li>决定了 flex container 是单行还是多行</li><li>nowrap</li><li>wrap</li><li>wrap-reverse</li></ul></li><li>flex-flow</li><li><strong>justify-content</strong><ul><li>决定了 flex items 在 main axis 上的对齐方式</li><li>flex-start（默认值）：与 main start 对齐</li><li>flex-end：与 main end 对齐</li><li>center：居中对齐</li><li>space-between： <ul><li>flex items 之间的距离相等</li><li>与 main start、main end两端对齐</li></ul></li><li>space-around： <ul><li>flex items 之间的距离相等</li><li>flex items 与 main start、main end 之间的距离是 flex items 之间距离的一半</li></ul></li><li>space-evenly： <ul><li>flex items 之间的距离相等</li><li>flex items 与 main start、main end 之间的距离 等于 flex items 之间的距离</li></ul></li></ul></li></ul><p><img src="'+t+'" alt="" loading="lazy"></p><ul><li>align-items 决定了 flex items 在 cross axis 上的对齐方式 <ul><li>normal：在弹性布局中，效果和stretch一样</li><li>stretch：当 flex items 在 cross axis 方向的 size 为 auto 时，会自动拉伸至填充 flex container</li><li>flex-start：与 cross start 对齐</li><li>flex-end：与 cross end 对齐</li><li>center：居中对齐</li><li>baseline：与基准线对齐</li></ul></li></ul><p><img src="'+a+'" alt="" loading="lazy"></p><ul><li>align-content 决定了多行 flex items 在 cross axis 上的对齐方式，用法与 justify-content 类似 <ul><li>stretch（默认值）：与 align-items 的 stretch 类似</li><li>flex-start：与 cross start 对齐</li><li>flex-end：与 cross end 对齐</li><li>center：居中对齐</li><li>space-between</li><li>space-around</li><li>space-evenly</li></ul></li></ul><p>应用在 flex items 上的 CSS 属性</p><ul><li><p>flex-grow</p><ul><li>flex-grow 决定了 flex items 如何扩展(拉伸/成长) <ul><li>可以设置任意非负数字（正小数、正整数、0），默认值是 0</li><li>当 flex container 在 main axis 方向上有剩余 size 时，flex-grow 属性才会有效</li><li>如果所有 flex items 的 flex-grow 总和 sum 超过 1，每个 flex item 扩展的 size 为flex container 的剩余 size * flex-grow / sum</li><li>flex items 扩展后的最终 size 不能超过 <code>max-width\\max-height</code></li></ul></li></ul></li><li><p>flex-basis</p><ul><li>flex-basis 用来设置 flex items 在 main axis 方向上的 base size</li><li>决定 flex items 最终 base size 的因素，从优先级高到低 <ul><li><code>max-width\\max-height\\min-width\\min-height</code></li><li>flex-basis</li><li><code>width\\height</code></li><li>内容本身的 size</li></ul></li></ul></li><li><p>flex-shrink 决定了flex items 如何收缩(缩小)</p><ul><li>可以设置任意非负数字（正小数、正整数、0），默认值是 1</li><li>当 flex items 在 main axis 方向上超过了 flex container 的 size，flex-shrink 属性才会有效</li><li>如果所有 flex items 的 flex-shrink 总和超过 1，每个 flex item 收缩的 size为flex items 超出 flex container 的 size * 收缩比例 / 所有 flex items 的收缩比例之和</li><li>flex items 收缩后的最终 size 不能小于 min-width\\min-height</li></ul></li><li><p>order 决定了 flex items 的排布顺序</p><ul><li>可以设置任意整数（正整数、负整数、0），值越小就越排在前面</li><li>默认值是0</li></ul></li><li><p>align-self</p></li><li><p>flex</p><ul><li>flex 是 flex-grow || flex-shrink || flex-basis 的简写,flex 属性可以指定1个，2个或3个值</li></ul></li><li><p>flex-items 可以通过 align-self 覆盖 flex container 设置的 align-items</p><ul><li>auto（默认值）：遵从 flex container 的 align-items 设置</li><li>stretch、flex-start、flex-end、center、baseline，效果跟 align-items 一致</li></ul></li></ul>',10),x=[r];function f(o,m){return i(),e("div",null,x)}const p=l(n,[["render",f],["__file","13flex布局.html.vue"]]);export{p as default};
