import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as i,a as n,b as s,d as t,e as a}from"./app-b036b826.js";const c={},r=a(`<h2 id="认识组件化开发" tabindex="-1"><a class="header-anchor" href="#认识组件化开发" aria-hidden="true">#</a> 认识组件化开发</h2><p><strong>人面对复杂问题的处理方式：</strong></p><ul><li>任何一个人处理信息的<span style="color:#00b0f0;">逻辑能力都是有限</span>的</li><li>所以，当面对一个非常复杂的问题时，我们不太可能<span style="color:#00b0f0;">一次性搞定一大堆</span>的内容。</li><li>但是，我们人有一种天生的能力，就是将问题进行<span style="color:#00b0f0;">拆解</span>。</li><li>如果将一个复杂的问题，<span style="color:#00b0f0;">拆分成很多个可以处理的小问题</span>，再将其放在整体当中，你会发现大的问题也会迎刃而解</li></ul><p><strong>组件化也是类似的思想：</strong></p><ul><li>如果我们将<span style="color:#00b0f0;">一个页面中所有的处理逻辑全部放在一起</span>，处理起来就会变得<span style="color:#00b0f0;">非常复杂</span>，而且不利于后续的管理以及扩展</li><li>但如果，我们<span style="color:#00b0f0;">将一个页面拆分成一个个小的功能块</span>，每个功能块完成属于<span style="color:#00b0f0;">自己这部分独立的功能</span>，那么之后整个页面的<span style="color:#00b0f0;">管理和维护</span>就变得非常容易了</li><li>如果我们将一个个功能块拆分后，就可以像<span style="color:#00b0f0;">搭建积木</span>一下来搭建我们的项目</li></ul><p>现在可以说整个的大前端开发都是<span style="color:#00b0f0;">组件化</span>的天下</p><ul><li>无论从三大框架（Vue、React、Angular），还是跨平台方案的Flutter，甚至是移动端都在转向组件化开发，包括小程序的开发也是采用组件化开发的思想。</li><li>所以，学习组件化最重要的是<span style="color:#00b0f0;">它的思想</span>，每个框架或者平台可能实现方法不同，但是思想都是一样的。</li><li>我们需要通过组件化的思想来思考整个应用程序： <ul><li>我们将一个完整的页面分成很多个组件；</li><li>每个组件都用于实现页面的一个功能块；</li><li>而每一个组件又可以进行细分；</li><li>而组件本身又可以在多个地方进行复用；</li></ul></li></ul><h2 id="vue的组件化" tabindex="-1"><a class="header-anchor" href="#vue的组件化" aria-hidden="true">#</a> Vue的组件化</h2><ul><li>前面我们的createApp函数传入了一个<span style="color:#00b0f0;">对象App</span>，这个对象其实本质上就是<span style="color:#00b0f0;">一个组件</span>，也是我们应用程序的<span style="color:#00b0f0;">根组件</span>；</li><li>组件化提供了一种抽象，让我们可以开发出<span style="color:#00b0f0;">一个个独立可复用的小组件</span>来构造我们的应用；</li><li>任何的应用都会被抽象成一颗<span style="color:#00b0f0;">组件树</span></li></ul><h3 id="注册组件的方式" tabindex="-1"><a class="header-anchor" href="#注册组件的方式" aria-hidden="true">#</a> 注册组件的方式</h3><p>如果我们现在有一部分内容（模板、逻辑等），我们希望将这部分内容抽取到一个独立的组件中去维护，这个时候如何注册一个<br> 组件呢？</p><ul><li>我们先从简单的开始谈起，比如下面的模板希望抽离到一个单独的组件</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注册组件分成两种：<br><mark style="background:#FFB86CA6;">全局组件</mark>：在任何其他的组件中都可以使用的组件；</li></ul><p><mark style="background:#FFB86CA6;">局部组件</mark>：只有在注册的组件中才能使用的组件；</p><h3 id="vue3组件" tabindex="-1"><a class="header-anchor" href="#vue3组件" aria-hidden="true">#</a> vue3组件</h3>`,16),u=n("br",null,null,-1),d={href:"https://cn.vuejs.org/tutorial/#step-11",target:"_blank",rel:"noopener noreferrer"},v=a(`<div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> ChildComp <span class="token keyword">from</span> <span class="token string">&#39;./ChildComp.vue&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComp</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注册全局组件" tabindex="-1"><a class="header-anchor" href="#注册全局组件" aria-hidden="true">#</a> 注册全局组件</h2><p>我们先来学习一下全局组件的注册：</p><ul><li>全局组件需要使用我们全局创建的<span style="color:#00b0f0;">app来注册组件</span>；</li><li>通过<span style="color:#00b0f0;">component方法</span>传入<span style="color:#00b0f0;">组件名称</span>、<span style="color:#00b0f0;">组件对象</span>即可注册一个全局组件了；</li><li>之后，我们可以在<span style="color:#00b0f0;">App组件的template中</span>直接<span style="color:#00b0f0;">使用这个全局组件</span>：</li></ul><h3 id="组件的名称" tabindex="-1"><a class="header-anchor" href="#组件的名称" aria-hidden="true">#</a> 组件的名称</h3><p>coderwhy</p><ul><li>在通过app.component注册一个组件的时候，第一个参数是组件的名称，定义组件名的方式有两种：</li><li>方式一：使用kebab-case（短横线分割符） <ul><li>当使用 kebab-case (短横线分隔命名) 定义一个组件时，你也必须在引用这个自定义元素时使用 kebab-case，例如 <code>&lt;my-component-name&gt;；</code></li></ul></li><li>方式二：使用PascalCase（驼峰标识符） <ul><li>当使用 PascalCase (首字母大写命名) 定义一个组件时，你在引用这个自定义元素时两种命名法都可以使用</li><li>也就是说 <code>&lt;my-component-name&gt;</code> 和 <code>&lt;MyComponentName&gt;</code> 都是可接受的</li></ul></li></ul><h2 id="注册局部组件" tabindex="-1"><a class="header-anchor" href="#注册局部组件" aria-hidden="true">#</a> 注册局部组件</h2>`,8),k={href:"https://cn.vuejs.org/guide/components/registration.html#local-registration",target:"_blank",rel:"noopener noreferrer"},m=a(`<p>全局组件往往是在应用程序一开始就会<span style="color:#00b0f0;">全局组件</span>完成，那么就意味着如果<span style="color:#00b0f0;">某些组件我们并没有用到，也会一起被注册</span>：</p><ul><li>比如我们注册了<span style="color:#00b0f0;">三个全局组件</span>：ComponentA、ComponentB、ComponentC；</li><li>在开发中我们只使用了ComponentA、ComponentB，如果<span style="color:#00b0f0;">ComponentC没有用到</span>但是我们依然在全局进行了注册，那么就意味着类似于webpack这种打包工具在打包我们的项目时，我们<span style="color:#00b0f0;">依然会对其进行打包</span>；</li><li>这样最终打包出的JavaScript包就会有关于ComponentC的内容，用户在下载对应的JavaScript时也会增加包的大小；</li></ul><p><mark style="background:#FF5582A6;"><span style="color:#fff;font-weight:800;">所以在开发中我们通常使用组件的时候采用的都是局部注册</span></mark>：<br><span style="color:#00b0f0;">局部注册</span>是在我们需要使用到的组件中，通过<span style="color:#00b0f0;">components属性选项</span>来进行注册；<br> 比如之前的App组件中，我们有data、computed、methods等选项了，事实上还可以有一个<span style="color:#00b0f0;">components选项</span>；<br> 该components选项对应的<span style="color:#00b0f0;">是一个对象</span>，对象中的键值对是 <span style="color:#00b0f0;">组件的名称: 组件对象</span></p><p>注意：<strong>局部注册的组件在后代组件中并不可用</strong></p><h3 id="局部组件注册代码" tabindex="-1"><a class="header-anchor" href="#局部组件注册代码" aria-hidden="true">#</a> 局部组件注册代码</h3><p>在使用 <code>&lt;script setup&gt;</code> 的单文件组件中，导入的组件可以直接在模板中使用，无需注册</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&#39;./ComponentA.vue&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentA</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有使用 <code>&lt;script setup&gt;</code>，则需要使用 <code>components</code> 选项来显式注册：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> ComponentA <span class="token keyword">from</span> <span class="token string">&#39;./ComponentA.js&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    ComponentA
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue的开发模式" tabindex="-1"><a class="header-anchor" href="#vue的开发模式" aria-hidden="true">#</a> Vue的开发模式</h3><p>目前我们使用vue的过程都是在html文件中，通过template编写自己的模板、脚本逻辑、样式等<br> 但是随着项目越来越复杂，我们会采用<span style="color:#00b0f0;">组件化</span>的方式来进行开发</p><ul><li>这就意味着每个组件都会有<span style="color:#00b0f0;">自己的模板、脚本逻辑、样式</span>等；</li><li>当然我们依然可以把它们<span style="color:#00b0f0;">抽离到单独的js、css文件</span>中，但是<span style="color:#00b0f0;">它们还是会分离开来</span>；</li><li>也包括我们的script是在<span style="color:#00b0f0;">一个全局的作用域</span>下，很容易出现<span style="color:#00b0f0;">命名冲突</span>的问题；</li><li>并且我们的代码为了适配一些浏览器，必须<span style="color:#00b0f0;">使用ES5的语法</span>；</li><li>在我们编写代码完成之后，依然需要<span style="color:#00b0f0;">通过工具对代码进行构建、代码</span></li></ul><p>所以在真实开发中，我们可以通过一个后缀名为 <code>.vue</code> 的<code>single-file components</code> (单文件组件) 来解决，并且可以使用<br> webpack或者vite或者rollup等构建工具来对其进行处理。</p><h3 id="单文件的特点" tabindex="-1"><a class="header-anchor" href="#单文件的特点" aria-hidden="true">#</a> 单文件的特点</h3><p><strong>在这个组件中我们可以获得非常多的特性</strong></p><ul><li>代码的高亮</li><li>ES6、CommonJS的模块化能力</li><li>组件作用域的CSS</li><li>可以使用预处理器来构建更加丰富的组件 <ul><li>TypeScript、Babel、Less、Sass等</li></ul></li></ul><h3 id="如何支持sfc" tabindex="-1"><a class="header-anchor" href="#如何支持sfc" aria-hidden="true">#</a> 如何支持SFC</h3><p>如果我们想要使用SFC的.vue文件，比较常见的是两种方式：</p><ol><li>使用Vue CLI来创建项目，项目会默认帮助我们配置好所有的配置选项</li><li>使用webpack或rollup或vite这类打包工具，对其打包处理</li></ol><h2 id="vscode对vue文件的支持" tabindex="-1"><a class="header-anchor" href="#vscode对vue文件的支持" aria-hidden="true">#</a> Vscode对vue文件的支持</h2><ol><li>Vue Language Features (Volar) vue3支持（官方推荐）</li><li>Vetur vue2支持</li></ol><h2 id="vue-cli脚手架" tabindex="-1"><a class="header-anchor" href="#vue-cli脚手架" aria-hidden="true">#</a> Vue CLI脚手架</h2><h3 id="什么是vue脚手架" tabindex="-1"><a class="header-anchor" href="#什么是vue脚手架" aria-hidden="true">#</a> 什么是Vue脚手架？</h3><p>脚手架其实是建筑工程中的一个概念，在我们软件工程中也会将一些<span style="color:#00b0f0;">帮助我们搭建项目的工具称之为脚手架</span><br> CLI是<code>Command-Line Interface</code>, 翻译为<span style="color:#00b0f0;">命令行界面</span><br> 我们可以通过CLI选择项目的配置和创建出我们的项目<br> Vue CLI已经<code>内置了webpack相关的配置</code>，我们不需要从零来配置</p><blockquote><p>注：现在官方已经不再维护Vue CLI了，推荐使用Vite构建项目</p></blockquote><h3 id="vue-安装" tabindex="-1"><a class="header-anchor" href="#vue-安装" aria-hidden="true">#</a> Vue 安装</h3>`,26),b={href:"https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application",target:"_blank",rel:"noopener noreferrer"},g=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">npm</span> create vue@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>✔ Project name: … <span class="token operator">&lt;</span>your-project-name<span class="token operator">&gt;</span>
✔ Add TypeScript? … No / Yes
✔ Add JSX Support? … No / Yes
✔ Add Vue Router <span class="token keyword">for</span> Single Page Application development? … No / Yes
✔ Add Pinia <span class="token keyword">for</span> state management? … No / Yes
✔ Add Vitest <span class="token keyword">for</span> Unit testing? … No / Yes
✔ Add an End-to-End Testing Solution? … No / Cypress / Playwright
✔ Add ESLint <span class="token keyword">for</span> code quality? … No / Yes
✔ Add Prettier <span class="token keyword">for</span> code formatting? … No / Yes

Scaffolding project <span class="token keyword">in</span> ./<span class="token operator">&lt;</span>your-project-name<span class="token operator">&gt;</span><span class="token punctuation">..</span>.
Done.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>your-project-name<span class="token operator">&gt;</span>
<span class="token operator">&gt;</span> <span class="token function">npm</span> <span class="token function">install</span>
<span class="token operator">&gt;</span> <span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h2><h3 id="vscode-的jsconfig-json" tabindex="-1"><a class="header-anchor" href="#vscode-的jsconfig-json" aria-hidden="true">#</a> vscode 的jsconfig.json</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span> 
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span> 
    <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;@/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;src/*&quot;</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;utils/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;src/utils/*&quot;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;dom&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;dom.iterable&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;scripthost&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vscode设置代码片段" tabindex="-1"><a class="header-anchor" href="#vscode设置代码片段" aria-hidden="true">#</a> vscode设置代码片段</h3>`,8),h={href:"https://snippet-generator.app/",target:"_blank",rel:"noopener noreferrer"},f=a(`<div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>AppContent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function y(_,q){const e=l("ExternalLinkIcon");return o(),i("div",null,[r,n("p",null,[s("开箱即用，引入后即可使用"),u,n("a",d,[s("vue教程-组件 | Vue.js (vuejs.org)"),t(e)])]),v,n("p",null,[n("a",k,[s("局部组件注册 | Vue.js (vuejs.org)"),t(e)])]),m,n("p",null,[n("a",b,[s("快速上手 | Vue.js (vuejs.org)"),t(e)])]),g,n("p",null,[n("a",h,[s("https://snippet-generator.app/"),t(e)])]),f])}const j=p(c,[["render",y],["__file","01Vue组件化开发.html.vue"]]);export{j as default};
